#!/bin/sh 

# Универсальный скрипт ZRAM для андроида и линукса
## Версия 1.0
# МОДИФИЦИРОВАННАЯ ВЕРСИЯ
# MY TODO:
#	* Перепроверить функции start и stop на корректность кода
#	* Переделать функцию config и status на обновлённый код скрипта
#	Необязательно:
#		- Внедрить функцию установки в xbin|bin каталог с автозаменой шебанга под текущее устройство
#		- Добавить функции создания и|или использования файла настройки
#

USER=$(whoami) > /dev/null 2>&1
ZRDR="/sys/class/zram-control"
PREMODZRAM=$(cat /lib/modules/$(uname -r)/modules.dep | grep zram.ko | tr -d ":") > /dev/null 2>&1
MODZRAM=$(find /lib/modules/$(uname -r)/$PREMODZRAM -type f) > /dev/null 2>&1
CORES=$(grep -c ^processor /proc/cpuinfo) > /dev/null 2>&1
ZNUM=$(ls /sys/block/ | grep -c zram) > /dev/null 2>&1

#echo $MODZRAM

if [ -f /system/bin/sh ]; then
	DEVZR="/dev/block"
else
	DEVZR="/dev"
fi
#echo $DEVZR

## Функция автоматической настройки
startAuto () {
	[ "$USER" = root ] || { echo && echo "	[Эта команда требует запуск от root]"; exit 1;}
	CHECKDEV="0"
	if [ -f "$MODZRAM" ]; then
		echo
		echo "Файл модуля ZRAM обнаружен"
		echo
		echo "Запущен скрипт оптимальной настройки ZRAM"
		sleep 3
		stop
		sleep 2

		echo "Настройка нового процесса ZRAM"
		###Set some defaults:
		##Автоматическое выделение на основе физической оперативной памяти
		ALLOCATION=$(awk '/MemTotal/{print $2}' /proc/meminfo)	#Количество выделенной памяти в ZRAM, в KBytes

##		#Ручное выделение памяти
##		ALLOCATION=$(( 4 * 1024 * 1024 ))

		PRIORITY=98		# Приоритет SWAP, смотри swapon(2) для деталей
		SWAPPINESS=80	# Значение интенсивности работы ZRAM
		echo
		echo "[Параметры запуска: DISKSIZE="$(( ALLOCATION / 1024 )) "MBytes, SWAPPINESS="$SWAPPINESS", PRIORITY="$PRIORITY"]"

		## Определение количества ядер, выставит 1 если не удастся определить
		if [ ! -f /proc/cpuinfo ]; then
			echo
			echo "ВНИМАНИЕ: Не удалось найти /proc/cpuinfo, proc подключен?"
			echo "		 Используется одно ядро для zramswap..."
			CORES=1
		else
			if [ "$CORES" -gt "4" ]; then
				CORES=$(($CORES / 2))
			else
				CORES=$CORES
			fi
		fi

		echo "Запуск процессов ZRAM"
		modprobe zram num_devices=$CORES
		echo $SWAPPINESS > /proc/sys/vm/swappiness
		for CORE in $(seq 0 $(($CORES - 1))); do
			echo lz4 > /sys/block/zram$CORE/comp_algorithm
			echo $(($ALLOCATION / $CORES))"K" > /sys/block/zram$CORE/disksize
			mkswap $DEVZR/zram$CORE
			swapon -p $PRIORITY $DEVZR/zram$CORE
		done
		echo
		echo "Выполнение завершено. ZRAM запущен"
		echo

	elif [ "$ZNUM" -ge "1" ]; then
		echo
		echo "Файл модуля ZRAM не найден, значит вшит в ядро"
		startLT
	elif  [ -d $ZRDR ]; then
		echo && echo "Требуется добавить устройство ZRAM. Используйте функцию 'addev' или 'addev max'" && echo
	else
		echo "Модуль ZRAM не обнаружен. Ядро поддерживает ZRAM?"
	fi
}
## end
startLT () {
		echo
		echo "Запущен скрипт оптимальной настройки ZRAM"
		sleep 2

		if [ "$CHECKDEV" != "1" ]; then
			stopLT
			SWAPPINESS=80	# Значение интенсивности работы ZRAM
		elif [ "$CHECKDEV" = "1" ]; then
			SWAPPINESS=$SWPNS
		fi

		sleep 2

		echo "Настройка нового процесса ZRAM"
		###Set some defaults:
		##Автоматическое выделение на основе физической оперативной памяти
		ALLOCATION=$(awk '/MemTotal/{print $2}' /proc/meminfo)	#Количество выделенной памяти в ZRAM, в KBytes

##		#Ручное выделение памяти
##		ALLOCATION=$(( 4 * 1024 * 1024 ))

		PRIORITY=100	# Приоритет SWAP, смотри swapon(2) для деталей
		echo
		echo "[Количество обнаруженных устройств ZRAM: "$ZNUM"]"
		echo "[Параметры запуска: DISKSIZE="$(( ALLOCATION / 1024 )) "MBytes, SWAPPINESS="$SWAPPINESS", PRIORITY="$PRIORITY"]"
		sleep 2
		echo
		echo "Запуск процесса ZRAM"
		echo $SWAPPINESS > /proc/sys/vm/swappiness
		for CORE in $(seq 0 $(($ZNUM - 1))); do
			echo lz4 > /sys/block/zram$CORE/comp_algorithm
			if [ "$CHECKDEV" != "1" ]; then
				echo $(($ALLOCATION / $ZNUM))"K" > /sys/block/zram$CORE/disksize
			elif [ "$CHECKDEV" = "1" ]; then
				echo $(($MDNSS / $ZNUM)) > /sys/block/zram$CORE/disksize
			fi
			mkswap $DEVZR/zram$CORE
			swapon -p $PRIORITY $DEVZR/zram$CORE
		done
		echo "Выполнение завершено. ZRAM запущен"
		echo
}
## end


## Функция ручной настройки
config () {
	[ "$USER" = root ] || { echo && echo "	[Эта команда требует запуск от root]"; exit 1;}
	CHECKDEV=0
	if [ -f "$MODZRAM" ]; then
		echo
		echo "Файл модуля ZRAM обнаружен"
		echo
		echo "Запущен скрипт ручной настройки ZRAM"
		echo "[Если скрипт запущен по ошибке, используйте CTRL+C для отмены]"
		sleep 3
		echo
		echo "Требуется ввести некоторые параметры"
		sleep 2

		#Параметры настройки zram
		echo
		echo "Введите количество устройств ZRAM (Доступно $CORES):"
		read ZCRE
		echo "Выбрано значение:" $ZCRE
		sleep 2
		
		echo
		echo "Введите значение DISKSIZE, в GBytes (Рекомендуется не меньше 4):"
		echo "[Справка: DISKSIZE - Это значение, определяющее количество памяти в ZRAM]"
		read MEM
		echo "Выбрано значение:" $MEM "GBytes"
		sleep 2

		echo
		echo "Введите значение SWAPPINESS 0-100 (Рекомендуется 60-80):"
		echo "[Справка: SWAPPINESS - Это значение, от величины которого зависит интенсивность работы ZRAM]"
		read SPNS
		echo Выбрано значение: $SPNS
		sleep 2

		stop
		sleep 2

		echo "Настройка нового процесса ZRAM"
		##Set some defaults:
		ALLOCATION=$(( $MEM * 1024 * 1024 ))	# Количество выделенной памяти в ZRAM, в GBytes
		PRIORITY=100	# Приоритет SWAP, смотри swapon(2) для деталей
		SWAPPINESS=$SPNS	# Значение интенсивности работы ZRAM
		echo
		echo "[Параметры запуска: ZramDevs=$ZCRE, DISKSIZE=$MEM GBytes, SWAPPINESS=$SWAPPINESS, PRIORITY=$PRIORITY]"

		echo "Запуск процессов ZRAM"
		CORES=$ZCRE
		modprobe zram num_devices=$CORES
		echo $SWAPPINESS > /proc/sys/vm/swappiness
		for CORE in $(seq 0 $(($CORES - 1))); do
			echo lz4 > /sys/block/zram$CORE/comp_algorithm
			echo $(($ALLOCATION / $CORES))"K" > /sys/block/zram$CORE/disksize
			mkswap $DEVZR/zram$CORE
			swapon -p $PRIORITY $DEVZR/zram$CORE
		done
		echo "Выполнение завершено. ZRAM запущен"
		echo

	elif [ "$ZNUM" -ge "1" ]; then
		echo
		echo "Файл модуля ZRAM не найден, значит вшит в ядро"
		echo
		echo "Запущен скрипт ручной настройки ZRAM"
		echo "[Если скрипт запущен по ошибке, используйте CTRL+C для отмены]"
		sleep 3

		echo
		echo "Требуется ввести некоторые параметры"
		sleep 2

		#Параметры настройки zram
		echo
		echo "Введите значение DISKSIZE, в GBytes (Рекомендуется не меньше 4):"
		echo "[Справка: DISKSIZE - Это значение, определяющее количество памяти в ZRAM]"
		read MEM
		echo "Выбрано значение:" $MEM "GBytes"
		sleep 2

		echo
		echo "Введите значение SWAPPINESS 0-100 (Рекомендуется 60-80):"
		echo "[Справка: SWAPPINESS - Это значение, от величины которого зависит интенсивность работы ZRAM]"
		read SPNS
		echo Выбрано значение: $SPNS
		sleep 2

		stop
		sleep 2

		echo "Настройка нового процесса ZRAM"
		##Set some defaults:
		ALLOCATION=$(( $MEM * 1024 * 1024 ))	# Количество выделенной памяти в ZRAM, в GBytes
		PRIORITY=100	# Приоритет SWAP, смотри swapon(2) для деталей
		SWAPPINESS=$SPNS	# Значение интенсивности работы ZRAM
		echo
		echo "[Количество обнаруженных устройств ZRAM: "$ZNUM"]"
		echo "[Параметры запуска: DISKSIZE="$MEM "GBytes, SWAPPINESS="$SWAPPINESS", PRIORITY="$PRIORITY"]"
		sleep 2
		echo
		echo "Запуск процесса ZRAM"
		echo $SWAPPINESS > /proc/sys/vm/swappiness
		for CORE in $(seq 0 $(($ZNUM - 1))); do
			echo lz4 > /sys/block/zram$CORE/comp_algorithm
			echo $(($ALLOCATION / $ZNUM))"K" > /sys/block/zram$CORE/disksize
			mkswap $DEVZR/zram$CORE
			swapon -p $PRIORITY $DEVZR/zram$CORE
		done
		echo "Выполнение завершено. ZRAM запущен"
		echo
	elif  [ -d $ZRDR ]; then
		echo && echo "Требуется добавить устройство ZRAM. Используйте функцию 'addev' или 'addev max'" && echo
	else
		echo "Модуль ZRAM не обнаружен. Ядро поддерживает ZRAM?"
	fi
}
## end


## Отключение ZRAM
stop () {
	[ "$USER" = root ] || { echo && echo "	[Эта команда требует запуск от root]"; exit 1;}

	if [ -f "$MODZRAM" ]; then
		if [ $(lsmod | grep zram | wc -l) -gt 0 ]; then
			echo
			echo "Запущен скрипт остановки ZRAM"
			echo "[Процесс может занять некоторое время]"
			for swapspace in $(swapon -s | awk '/zram/{print $1}'); do
				swapoff $swapspace
			done
			modprobe -r zram
			echo "Выполнение завершено. ZRAM отключен"
			echo
		else
			echo
			echo "ZRAM уже отключен"
			echo
		fi

	elif [ "$ZNUM" -ge "1" ]; then
		echo
		echo "Файл модуля ZRAM не найден, значит вшит в ядро"
		stopLT
	elif  [ -d $ZRDR ]; then
		echo && echo "Требуется добавить устройство ZRAM. Используйте функцию 'addev' или 'addev max'" && echo
	else
		echo && echo "Встроенный модуль ZRAM не обнаружен. Ядро поддерживает ZRAM?" && echo
	fi
}
stopLT () {
		echo
		echo "Запущен скрипт остановки ZRAM"
		echo "[Процесс может занять некоторое время]"
		echo "[Для отмены используйте 'CTRL+C' и команду 'killall swapoff']"
		echo
		for ZRST in $(seq 1 $ZNUM); do
			stopSRV &
		done
		sleep 4
		offcheck () {
			if ! pgrep -x swapoff > /dev/null; then
				sleep 5
				echo "Выполнение завершено. ZRAM отключен"
				echo
			else
				sleep 10
				offcheck
			fi
		}
		offcheck
}
## end

## Добавление устройства ZRAM
addev () {
	[ "$USER" = root ] || { echo && echo "	[Эта команда требует запуск от root]"; exit 1;}
	if [ -d $ZRDR ]; then
		echo && echo "[Внимание, функция находится в тестировании]"
		sleep 2
		if [ "$ZNUM" -ge "$CORES" ]; then
			echo && echo "Количество устройств ZRAM совпадает с количеством потоков процессора:"
			echo "CPU="$CORES";" "ZRAM="$ZNUM
			echo "Превышение значения CPU может привести к нестабильной работе ZRAM/устройства"
			echo "Продолжить? [y/n]"
			read CONFIRM

			if [ "$CONFIRM" = "y" ]; then
				echo && echo "Добавление устройства ZRAM"
				cat $ZRDR/hot_add > /dev/null 2>&1
				echo && echo "Устройство ZRAM добавлено"
				echo "Требуется перезапуск ZRAM для применения"
				echo "Текущее количество устройств:" $(( $ZNUM + 1 ))
				echo
			else
				echo && echo "Прервано" && echo
			fi
		elif [ "$ZNUM" -le "$CORES" ]; then
			echo && echo "Добавление устройства ZRAM"
			cat $ZRDR/hot_add > /dev/null 2>&1
			echo && echo "Устройство ZRAM добавлено"
			echo "Требуется перезапуск ZRAM для применения"
			echo "Текущее количество устройств: "$(( $ZNUM + 1 ))
			echo
		fi
	else
		echo && echo "Ядро не поддерживает 'Горячее' добавление/удаление устройств ZRAM" && echo
	fi
}
## end
## Добавление устройств ZRAM по количеству потоков CPU
maxdev () {
	[ "$USER" = root ] || { echo && echo "	[Эта команда требует запуск от root]"; exit 1;}
	if [ -d $ZRDR ]; then
		echo && echo "[Внимание, функция находится в тестировании]"
		sleep 2
		echo && echo "Добавление устройств ZRAM"
		for ZADD in $(seq $ZNUM $(($CORES - 1))); do
			cat $ZRDR/hot_add > /dev/null 2>&1
		done
		echo && echo "Устройства ZRAM добавлены"
		echo "Требуется перезапуск ZRAM для применения"
		echo "Текущее количество устройств:" $(( $(ls $DEVZR | grep -c zram) ))
		echo
	else
		echo && echo "Ядро не поддерживает 'Горячее' добавление/удаление устройств ZRAM" && echo
	fi
}
## end
## Удаление устройств ZRAM по количеству
rmdev () {
	[ "$USER" = root ] || { echo && echo "	[Эта команда требует запуск от root]"; exit 1;}
	if [ -d $ZRDR ]; then
		[ "$ZNUM" -gt "1" ] || { echo && echo "Требуется добавить устройство ZRAM. Используйте функцию 'addev' или 'addev max'" && echo; exit 1;}
		echo && echo "[Внимание, функция находится в тестировании]"
		sleep 2
		echo && echo "Для данной функции процессы ZRAM будут остановлены" && echo
		sleep 2
		echo "Требуется ввести сколько устройств ZRAM удалить"
		echo "Всего устройств ZRAM:" $ZNUM
		echo "Доступно к удалению" $(( $ZNUM - 1 ))":"
		read ZCNT
		if [ $ZCNT -le $(( $ZNUM - 1 )) ]; then
			CHECKDEV=1
			MDNSS=$(( $(cat /sys/block/zram0/disksize) * $ZNUM ))
			SWPNS=$(cat /proc/sys/vm/swappiness)
			stopLT
			ZRMT=$(( $ZNUM - $ZCNT ))
			rmdevSRV > /dev/null 2>&1
			ZNUM=$(ls /sys/block/ | grep -c zram) > /dev/null 2>&1
			echo "Устройства ZRAM удалены, выполняется перезапуск ZRAM"
			startLT
			echo "Текущее количество устройств:" $(( $(ls $DEVZR | grep -c zram) ))
			echo
		else
			echo "Введено некорректное/превышающее число. Прерывание" && echo
		fi
	else
		echo && echo "Ядро не поддерживает 'Горячее' добавление/удаление устройств ZRAM" && echo
	fi
}
## end


## Показывает текущее состояние ZRAM
info () {
	echo "[Внимание! Функция на данный момент неработоспособна, вывод доступной информации]"
	echo
	echo "Количество устройств ZRAM:" $ZNUM
	echo "Текущий SWAPPINESS равен" $(cat /proc/sys/vm/swappiness)
	swapon
	free | grep -e всего -e Подкачка -e total -e Swap
	echo
##
##	Функционал не функционирует, отключено и возможно будет пофикшено
##
#	echo "Отображение текущего состояния ZRAM"
#	orig_data_size="0"
#	for file in /sys/block/zram*/*_data_size ; do
#		if [ $file = "/sys/block/zram*/*_data_size" ]; then
#			compress_ratio="0"
#			break
#		fi
#		read file_content < $file
#		what=$(basename $file)
#		eval "$what=\$(($what + $file_content))"
#		compress_ratio=$(echo "scale=2; $orig_data_size / $compr_data_size" | bc)
#	done
#	echo "compr_data_size: $((compr_data_size / 1024)) KiB"
#	echo "orig_data_size:  $((orig_data_size  / 1024)) KiB"
#	echo "compression-ratio: $compress_ratio"
#
}
## end

## TestСервисы
stopSRV () {
	CORE="$(($ZRST - 1))"
	swapoff $DEVZR/zram$CORE > /dev/null 2>&1
	echo '1' > /sys/block/zram$CORE/reset
	if [ "$DEVZR" = "/dev/block" ]; then
		echo '0' > /sys/block/zram$CORE/disksize
	fi
	echo "Устройство ZRAM "$CORE" отключено"
}
rmdevSRV () {
	for ZRM in $(seq $ZNUM -1 $ZRMT); do
		echo "$ZRM" > $ZRDR/hot_remove
	done
}
## end

## Выводит справку
help () {
	echo
	echo "Использование:"
	echo "	zramswap start - [ROOT] Запускает ZRAM с оптимальной настройкой"
	echo "	zramswap config - [ROOT] Запускает ручную настройку ZRAM"
	echo "	zramswap stop - [ROOT] Отключает ZRAM"
	echo "	zramswap addev - (TEST) [ROOT] Добавляет устройство ZRAM"
	echo "		 >>addev max - (TEST) [ROOT] Добавляет по количеству потоков CPU"
	echo "	zramswap rmdev - (TEST) [ROOT] Убирает устройство ZRAM"
	echo "	zramswap info - Выводит текущий статус ZRAM"
	echo "	zramswap help - Выводит данную справку"
	echo
}
## end


if [ "$1" = "start" ]; then startAuto;
	#if ! [ "$2" = "lite" ]; then startAuto; else startLT; fi
elif [ "$1" = "config" ]; then config;
elif [ "$1" = "stop" ]; then stop;
elif [ "$1" = "addev" ]; then 
	if [ "$2" = "max" ]; then maxdev; else addev; fi
elif [ "$1" = "rmdev" ]; then rmdev;
elif [ "$1" = "info" ]; then info;
elif [ "$1" = "help" ]; then help;
elif [ "$1" = "" ]; then
	echo && echo " Команда отсутствует. Введите «zramswap help» для получения справки" && echo
elif ! [ "$1" = "help" ]; then
	echo && echo " Неправильная команда. Введите «zramswap help» для получения справки" && echo
fi
